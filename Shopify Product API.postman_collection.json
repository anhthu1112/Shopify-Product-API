{
	"info": {
		"_postman_id": "9b5a94d3-7445-4ecc-bcad-eacf50ef2c4e",
		"name": "Shopify Product API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33233107",
		"_collection_link": "https://universal-capsule-109987.postman.co/workspace/API-Test-Automation-with-Postma~cf741ed7-6043-4f19-bd57-5fac237a8a95/collection/33233107-9b5a94d3-7445-4ecc-bcad-eacf50ef2c4e?action=share&source=collection_link&creator=33233107"
	},
	"item": [
		{
			"name": "Create a new product",
			"item": [
				{
					"name": "Create a new product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testCaseNumber = pm.variables.get(\"TC\")",
									"var responseBody = pm.response.json()",
									"var productTitle = pm.variables.get(\"productTitle\");",
									"var body_html = pm.variables.get(\"bodyHtml\")",
									"var vendor = pm.variables.get(\"vendor\");",
									"var product_type = pm.variables.get(\"product_type\");",
									"var status = pm.variables.get(\"status\");",
									"var template_suffix = pm.variables.get(\"template_suffix\");",
									"var options = pm.variables.get(\"options\");",
									"var option1Value = pm.variables.get(\"option1Value\");",
									"var option2Value = pm.variables.get(\"option2Value\");",
									"var option3Value = pm.variables.get(\"option3Value\");",
									"",
									"",
									"if (testCaseNumber == 1){ // Normal case: Status code : 201 and Json schema is valid ",
									"    pm.test(\"Normal case\", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"            var schema = {",
									"            type: \"object\",",
									"            properties: {",
									"            product: {",
									"                type: \"object\",",
									"                properties: {",
									"                id: { type: \"integer\" },",
									"                title: { type: \"string\" },",
									"                body_html: { type: \"string\" },",
									"                vendor: { type: \"string\" },",
									"                product_type: { type: \"string\" },",
									"                created_at: { type: \"string\" },",
									"                handle: { type: \"string\" },",
									"                updated_at: { type: \"string\" },",
									"                published_at: { type: [\"string\", \"null\"], format: \"date-time\" },",
									"                template_suffix: { type: [\"string\", \"null\"] },",
									"                published_scope: { type: \"string\" },",
									"                tags: { type: \"string\" },",
									"                status: { type: \"string\" },",
									"                admin_graphql_api_id: { type: \"string\" },",
									"                variants: {",
									"                    type: \"array\",",
									"                    items: {",
									"                    type: \"object\",",
									"                    properties: {",
									"                        id: { type: \"integer\" },",
									"                        product_id: { type: \"integer\" },",
									"                        title: { type: \"string\" },",
									"                        price: { type: [\"string\", \"null\"] },",
									"                        sku: { type: \"string\" },",
									"                        position: { type: \"integer\" },",
									"                        inventory_policy: { type: \"string\" },",
									"                        compare_at_price: { type: [\"number\", \"null\"] },",
									"                        fulfillment_service: { type: \"string\" },",
									"                        inventory_management: { type: [\"string\", \"null\"] },",
									"                        option1: { type: [\"string\", \"null\"] },",
									"                        option2: { type: [\"string\", \"null\"] },",
									"                        option3: { type: [\"string\", \"null\"] },",
									"                        created_at: { type: \"string\" },",
									"                        updated_at: { type: \"string\" },",
									"                        taxable: { type: \"boolean\" },",
									"                        barcode: { type: [\"string\", \"null\"] },",
									"                        grams: { type: \"integer\" },",
									"                        weight: { type: \"integer\" },",
									"                        weight_unit: { type: \"string\" },",
									"                        inventory_item_id: { type: \"integer\" },",
									"                        inventory_quantity: { type: \"integer\" },",
									"                        old_inventory_quantity: { type: \"integer\" },",
									"                        requires_shipping: { type: \"boolean\" },",
									"                        admin_graphql_api_id: { type: \"string\" },",
									"                        image_id: { type: [\"integer\", \"null\"] },",
									"                    },",
									"                    required: [",
									"                        \"id\",",
									"                        \"product_id\",",
									"                        \"title\",",
									"                        \"price\",",
									"                        \"sku\",",
									"                        \"position\",",
									"                        \"inventory_policy\",",
									"                        \"compare_at_price\",",
									"                        \"fulfillment_service\",",
									"                        \"inventory_management\",",
									"                        \"option1\",",
									"                        \"option2\",",
									"                        \"option3\",",
									"                        \"created_at\",",
									"                        \"updated_at\",",
									"                        \"taxable\",",
									"                        \"barcode\",",
									"                        \"grams\",",
									"                        \"weight\",",
									"                        \"weight_unit\",",
									"                        \"inventory_item_id\",",
									"                        \"inventory_quantity\",",
									"                        \"old_inventory_quantity\",",
									"                        \"requires_shipping\",",
									"                        \"admin_graphql_api_id\",",
									"                        \"image_id\",",
									"                    ],",
									"                    additionalProperties: false,",
									"                    },",
									"                },",
									"                options: {",
									"                    type: \"array\",",
									"                    items: {",
									"                    type: \"object\",",
									"                    properties: {",
									"                        id: { type: \"integer\" },",
									"                        product_id: { type: \"integer\" },",
									"                        name: { type: \"string\" },",
									"                        position: { type: \"integer\" },",
									"                        values: { type: \"array\" },",
									"                    },",
									"                    required: [\"id\", \"product_id\", \"name\", \"position\", \"values\"],",
									"                    additionalProperties: false,",
									"                    },",
									"                },",
									"                images: { type: \"array\" },",
									"                image: { type: [\"string\", \"null\"] },",
									"                },",
									"                required: [",
									"                \"id\",",
									"                \"title\",",
									"                \"body_html\",",
									"                \"vendor\",",
									"                \"product_type\",",
									"                \"created_at\",",
									"                \"handle\",",
									"                \"updated_at\",",
									"                \"published_at\",",
									"                \"template_suffix\",",
									"                \"published_scope\",",
									"                \"tags\",",
									"                \"status\",",
									"                \"admin_graphql_api_id\",",
									"                \"variants\",",
									"                \"options\",",
									"                \"images\",",
									"                \"image\",",
									"                ],",
									"                additionalProperties: false,",
									"            },",
									"            },",
									"            required: [\"product\"],",
									"            additionalProperties: false,",
									"        };",
									"        pm.expect(pm.response).to.have.jsonSchema ",
									"    })",
									"} else if (testCaseNumber == 2){ // Verify that the \"Title\" returns a response the same as the request ",
									"    pm.test(\"Test title is valid\", function(){",
									"        pm.expect(pm.response.code).to.eq(201)",
									"        pm.expect(responseBody.product.title).to.eql(productTitle);",
									"    });  ",
									"} else if (testCaseNumber == 3){ // Title is blank ",
									"    pm.test(\"Title is blank\", function(){",
									"        pm.expect(pm.response.code).to.eq(422);",
									"        pm.expect(responseBody.errors.title[0]).to.eq(\"can't be blank\");",
									"    });",
									"} else if (testCaseNumber == 4){ // Title is greater than 255 characters",
									"    pm.test(\"Title is greater than 255 characters\", function(){",
									"        pm.expect(pm.response.code).to.eq(422);",
									"        pm.expect(responseBody.errors.title[0]).to.eq(\"is too long (maximum is 255 characters)\");",
									"    });",
									"} else if (testCaseNumber == 5){ // Verify that the Body_html returns response the same as the request, including HTML tag ",
									"    pm.test(\"test body_html is valid\", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.body_html).to.eq(body_html);",
									"    });",
									"} else if (testCaseNumber == 6){ // Body_html is blank ",
									"    pm.test(\"Body_html is blank\", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.body_html).to.eq(body_html);",
									"    });",
									"} else if (testCaseNumber == 7){ // Verify that the Vendor returns response the same as the request",
									"    pm.test(\"Vendor is valid\", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.vendor).to.eq(vendor)",
									"    });",
									"} else if (testCaseNumber == 8){ // Vendor is blank",
									"    pm.test(\"Vendor is blank\", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.vendor).to.eq(\"anhthu\")",
									"    });",
									"} else if (testCaseNumber == 9){ // Vendor is greater than 255 characters",
									"    pm.test(\"Vendor is greater than 255 characters\", function(){",
									"        pm.expect(pm.response.code).to.eq(422);",
									"        pm.expect(responseBody.errors.vendor[0]).to.eql(\"is too long (maximum is 255 characters)\"); ",
									"    });",
									"} else if (testCaseNumber == 10){ // Verify that the product_type returns the response the same as the request ",
									"    pm.test(\"product_type is valid\", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.product_type).to.eql(product_type);",
									"    });",
									"} else if (testCaseNumber == 11){ // Product_title is blank ",
									"    pm.test(\"Product_title is blank\", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.product_type).to.eql(product_type);",
									"    });",
									"} else if (testCaseNumber == 12){ // Product_title is is greater than 255 characters",
									"    pm.test(\"Product_title is is greater than 255 characters\", function(){",
									"        pm.expect(pm.response.code).to.eq(422);",
									"        pm.expect(responseBody.errors.title[0]).to.eql(\"is too long (maximum is 255 characters)\");",
									"    });",
									"} else if (testCaseNumber == 13){ // Verify that the status returns 'draft' the same as in the request ",
									"    pm.test(\"status is draft\", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.status).to.eql(\"draft\");",
									"    });",
									"} else if (testCaseNumber == 14){ // Verify that the status returns 'archived' the same as in the request ",
									"    pm.test(\"status is archived\", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.status).to.eql(\"archived\");",
									"    });",
									"} else if (testCaseNumber == 15){ // Verify that the status returns 'active' the same as in the request ",
									"    pm.test(\"status is active\", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.status).to.eql(\"active\");",
									"    });",
									"} else if (testCaseNumber == 16){ // Verify that the status returns an errors message when the request body contains an invalid value ",
									"    pm.test(\"status is invalid\", function(){",
									"        pm.expect(pm.response.code).to.eq(422);",
									"        pm.expect(responseBody.errors.status[0]).to.eq(\"isn't valid. Set the status as active, draft, or archived.\"); ",
									"    })",
									"} else if (testCaseNumber == 17){ // status is blank ",
									"    pm.test(\"status is blank\", function(){",
									"        pm.expect(pm.response.code).to.eq(422);",
									"        pm.expect(responseBody.errors.status[0]).to.eq(\"isn't valid. Set the status as active, draft, or archived.\"); ",
									"    });",
									"} else if (testCaseNumber == 18){ // Verify that the request body 'handle' is the same as the previously generated 'handle'",
									"    pm.test(\"handle is the same as the prviously gennerated\", function(){",
									"        pm.expect(pm.response.code).to.eq(201); ",
									"        pm.expect(responseBody.product.handle).to.include(\"burton-custom-freestyle\")",
									"    })",
									"} else if (testCaseNumber == 19){ // Verify that the reuquest body 'handle' is not the same as the previously generated 'handle'",
									"    pm.test(\"handle is not the same as the prviously gennerated\", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"    });",
									"} else if (testCaseNumber == 20){ // handle is blank ",
									"    pm.test(\"handle is blank\", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.handle).to.include(\"ten-san-pham-p\");",
									"    });",
									"} else if (testCaseNumber == 21){ // template_suffix is blank ",
									"    pm.test(\"template_suffix is blank \", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.template_suffix).to.include(template_suffix);",
									"    });",
									"} else if (testCaseNumber == 22){ // Verify that the template_suffix returns the same as the request body  ",
									"    pm.test(\"template_suffix is valid \", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.template_suffix).to.include(template_suffix);",
									"        });",
									"} else if (testCaseNumber == 23){ // Verify that the 'published_at' when the status is set to 'active'",
									"    pm.test(\"published_at is valid with status active\", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"",
									"    });",
									"} else if (testCaseNumber == 24){ // Verify that the 'published_at' when the status is set to 'archived'",
									"     pm.test(\"published_at with status archived\", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.published_at).to.eq(null);",
									"    });",
									"} else if (testCaseNumber == 25){ // Verify that the 'published_at' when the status is set to ' draft '",
									"     pm.test(\"published_at with status draft\", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.published_at).to.eq(null);",
									"    });",
									"} else if (testCaseNumber == 26){ // Verify that the 'published_scope' : web when the status is set to 'active'",
									"    pm.test(\"published_scope: web with the status active\", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.published_scope).to.eq(\"web\");",
									"    });",
									"} else if (testCaseNumber == 27){ // Verify that the 'published_scope' : global when the status is set to 'active'",
									"    pm.test(\"published_scope: global with the status active\", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.published_scope).to.eq(\"global\");",
									"    });",
									"} else if (testCaseNumber == 28){ // Verify that the 'published_scope' is blank when the status is set to 'active'",
									"    pm.test(\"published_scope: blank with the status active\", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.published_scope).to.eq(\"global\");",
									"    });",
									"} else if (testCaseNumber == 29){ // Verify that the 'published_scope' : web when the status is set to 'archived'",
									"     pm.test(\"published_scope: web with the status archived\", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.published_scope).to.eq(\"web\");",
									"     });",
									"} else if (testCaseNumber == 30){ // Verify that the 'published_scope' : global when the status is set to 'archived'",
									"     pm.test(\"published_scope: global with the status archived\", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.published_scope).to.eq(\"web\");",
									"     });",
									"} else if (testCaseNumber == 31){ // Verify that the 'published_scope' : web when the status is set to 'draft'",
									"     pm.test(\"published_scope: web with the status draft\", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.published_scope).to.eq(\"web\");",
									"     });",
									"} else if (testCaseNumber == 32){ // Verify that the 'published_scope' : global when the status is set to 'draft'",
									"     pm.test(\"published_scope: global with the status draft\", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.published_scope).to.eq(\"web\");",
									"     });",
									"}  else if (testCaseNumber == 33){ // Verify that the request body include 'published_scope' with a value different from 'web' and 'global'",
									"     pm.test(\"published_scope with a value different web and global \", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.published_scope).to.eq(\"web\");",
									"     });",
									"}  else if (testCaseNumber == 34){ // Verify that the 'published_scope' is blank when the status is set to 'archived'",
									"     pm.test(\"published_scope is blank with status archived \", function(){",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.published_scope).to.eq(\"web\");",
									"     });",
									"} else if (testCaseNumber == 35){ //Verify that the request body returns default 'options', sending an empty array ",
									"    pm.test(\"default options, sending an empty array\", function(){",
									"        pm.expect(pm.response.code).to.eq(201); ",
									"        pm.expect(responseBody.product.options.length).to.eq(1);",
									"    })",
									"} else if (testCaseNumber == 36){ // Request body includes 'options', sending an empty value \"\"",
									"    pm.test(\"options when sending an empty value\", function(){",
									"        pm.expect(pm.response.code).to.eq(400);",
									"        pm.expect(responseBody.errors.options).to.eq(\"expected String to be a Array\");",
									"    });",
									"} else if (testCaseNumber == 37){ // Request body includes  'options' that send the \"null\" value ",
									"    pm.test(\"default options, sending the null value\", function(){",
									"        pm.expect(pm.response.code).to.eq(201); ",
									"        pm.expect(responseBody.product.options.length).to.eq(1);",
									"    });",
									"} else if (testCaseNumber == 38){ //Request body includes  'options' that send an empty variant ",
									"    pm.test(\"options with 1 empty variants\", function() {",
									"        pm.expect(pm.response.code).to.equal(422);",
									"        pm.expect(responseBody.errors.options[0]).to.eq(\"is invalid\");",
									"        pm.expect(responseBody.errors.name[0]).to.eq(\"can't be blank\");",
									"    });",
									"} else if (testCaseNumber == 39){ //Request body includes  'options' that send an variant of options",
									"    pm.test(\"options when sending an variant of options\", function() {",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.options.length).to.eq(1);",
									"    });",
									"} else if (testCaseNumber == 40){ // Request body includes  'options' that send 2 variants  of options",
									"     pm.test(\"options when sending 2 variant of options\", function() {",
									"        pm.expect(pm.response.code).to.eq(422)",
									"        pm.expect(responseBody.errors.base[0]).to.include(\"You need to add option values for\")",
									"     });",
									"} else if (testCaseNumber == 41){ // Request body sends up 'options' with 2 'variants' respectively,  'option1' and 'option2'",
									"     pm.test(\"options with 2 variant of options  respectively\", function() {",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.options.length).to.eq(2);",
									"     });",
									"} else if (testCaseNumber == 42){ //Request body sends up 'options' with 3 'variants' respectively,  'option1' , 'option2', 'option3'",
									"     pm.test(\"options with 3 variant of options  respectively\", function() {",
									"        pm.expect(pm.response.code).to.eq(201);",
									"        pm.expect(responseBody.product.options.length).to.eq(3);",
									"     });",
									"} else if (testCaseNumber == 43){ //Request body includes  'options' that send 4 variants  of options",
									"     pm.test(\"options with 4 variant of options  respectively\", function() {",
									"        pm.expect(pm.response.code).to.eq(422);",
									"        pm.expect(responseBody.errors.base[0]).to.eq(\"Cannot have more than 3 options\")",
									"     });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var option1Name = pm.variables.get(\"option1Name\");\r",
									"var option2Name = pm.variables.get(\"option2Name\");\r",
									"var option3Name = pm.variables.get(\"option3Name\");\r",
									"var option4Name = pm.variables.get(\"option4Name\");\r",
									"\r",
									"var options = [option1Name, option2Name, option3Name, option4Name]\r",
									".filter(optionName => optionName !== \"\")\r",
									".map(optionName => ({name: optionName}))\r",
									"\r",
									"pm.variables.set(\"options\", options);\r",
									"pm.variables.set(\"optionsStringify\", JSON.stringify(options));\r",
									"\r",
									"\r",
									"var optionsArray = pm.variables.get(\"optionsArray\");\r",
									"var testCaseNumber = pm.variables.get(\"TC\");\r",
									"\r",
									"if (optionsArray === \"\" && testCaseNumber == 36) {\r",
									"    pm.variables.set(\"optionsStringify\",JSON.stringify(optionsArray));\r",
									"} else if (optionsArray === \"null\"){\r",
									"    pm.variables.set(\"optionsStringify\",\"null\");\r",
									"} else if (optionsArray === \"[{}]\" && testCaseNumber == 38)\r",
									"     pm.variables.set(\"optionsStringify\",\"[{}]\");\r",
									"\r",
									"    \r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product\": {\r\n        \"title\": \"{{productTitle}}\",\r\n        \"body_html\": \"{{bodyHtml}}\",\r\n        \"vendor\": \"{{vendor}}\",\r\n        \"product_type\": \"{{product_type}}\",\r\n        \"status\": \"{{status}}\",\r\n        \"handle\": \"{{handle}}\",\r\n        \"published_scope\": \"{{published_scope}}\",\r\n        \"published_at\": \"{{published_at}}\",\r\n        \"template_suffix\": \"{{template_suffix}}\",\r\n        \"variants\":  [\r\n            {\r\n                \"option1\": \"{{option1Value}}\",\r\n                \"option2\": \"{{option2Value}}\",\r\n                \"option3\": \"{{option3Value}}\"\r\n\r\n            }\r\n        ],\r\n        \"options\": {{optionsStringify}}\r\n      \r\n    }\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/api/2024-01/products.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"api",
								"2024-01",
								"products.json"
							]
						},
						"description": "  \nCreate a new product"
					},
					"response": []
				}
			]
		},
		{
			"name": "Retrieve a list of products",
			"item": [
				{
					"name": "Retrieve a list of products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testCaseNumber = pm.variables.get(\"TC\");\r",
									"var responseBody = pm.response.json();\r",
									"var ids = pm.variables.get(\"ids\");\r",
									"\r",
									"var schema = {\r",
									"    type: 'object',\r",
									"    properties: {\r",
									"        products: {\r",
									"            type: 'array',\r",
									"            items: {\r",
									"                type: 'object',\r",
									"                properties: {\r",
									"                    id: { type: 'integer' },\r",
									"                    title : {type: 'string'},\r",
									"                    body_html : {type: 'string'},\r",
									"                    product_type : {type: 'string'},\r",
									"                    created_at : {type: 'string', format: 'date-time'},\r",
									"                    handle : {type: 'string'},\r",
									"                    updated_at : {type: 'string', format: 'date-time'},\r",
									"                    published_at : {type: ['string', 'null']},\r",
									"                    tags : {type: 'string'}, \r",
									"                    status : {type: 'string'}, \r",
									"                    admin_graphql_api_id : {type: 'string'}, \r",
									"                    variants: {\r",
									"                        type: 'array',\r",
									"                        items: {\r",
									"                            type: 'object',\r",
									"                            properties: {\r",
									"                                id: {type: 'integer'},\r",
									"                                product_id: {type: 'integer'},\r",
									"                                title: {type: 'string'},\r",
									"                                price: {type: 'string'},\r",
									"                                sku: {type: 'string'},\r",
									"                                position: {type: 'number'},\r",
									"                                inventory_policy: {type: 'string'},\r",
									"                                compare_at_price: {type: ['number', 'null']},\r",
									"                                fulfillment_service: {type: 'string'},\r",
									"                                inventory_management: {type: ['string', 'null']},\r",
									"                                option1: {type: ['string', 'null']},\r",
									"                                option2: {type: ['string', 'null']},\r",
									"                                option3: {type: ['string', 'null']},\r",
									"                                created_at: {type: 'string', format:'date-time'},\r",
									"                                updated_at: {type: 'string', format:'date-time'},\r",
									"                                taxable: {type: 'boolean'},\r",
									"                                barcode: {type: ['string', 'null']},\r",
									"                                grams: {type: 'number'},\r",
									"                                weight: {type: 'number'},\r",
									"                                weight_unit: {type: 'string'},\r",
									"                                inventory_item_id: {type: 'integer'},\r",
									"                                inventory_quantity: {type: 'number'},\r",
									"                                old_inventory_quantity: {type: 'number'},\r",
									"                                requires_shipping: {type: 'boolean'},\r",
									"                                admin_graphql_api_id: {type: 'string'},\r",
									"                                image_id: {type: ['string', 'null']},\r",
									"                            },\r",
									"                            required: ['id', 'product_id', 'title', 'price', 'sku', 'position', 'inventory_policy', 'compare_at_price', 'fulfillment_service', 'inventory_management', 'option1', 'option2', 'option3', 'created_at', 'updated_at', 'taxable', 'barcode', 'grams', 'weight', 'weight_unit', 'inventory_item_id', 'inventory_quantity', 'old_inventory_quantity', 'requires_shipping', 'admin_graphql_api_id', 'image_id'],\r",
									"                            additionalProperties: false,\r",
									"                        }\r",
									"                    },\r",
									"                    options: {\r",
									"                        type: 'array',\r",
									"                        items: {\r",
									"                            type: 'object',\r",
									"                            properties: {\r",
									"                                id: {type: 'integer'},\r",
									"                                product_id: {type: 'integer'},\r",
									"                                name: {type: 'string'},\r",
									"                                position: {type: 'number'},\r",
									"                                values: {type: 'array'},\r",
									"                            },\r",
									"                            required: ['id', 'product_id', 'name', 'position', 'values'],\r",
									"                            additionalProperties: false,\r",
									"                        }\r",
									"                    },\r",
									"                \r",
									"                },\r",
									"            },\r",
									"            required: ['products'],\r",
									"        addtionalProperties: false,\r",
									"        },\r",
									"    },\r",
									"};\r",
									"\r",
									"if (testCaseNumber == 1){ // Verify that API returns stattus code: 200 and Json Schema is valid \r",
									"    pm.test(\"Normal case\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(pm.response.json()).to.have.jsonSchema(schema);\r",
									"     });\r",
									"} else if (testCaseNumber == 2){ // Verify that the 'ids' returns the correct list based on the parameter \r",
									"    pm.test(\"ids' returns the correct list \", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(2);\r",
									"    });\r",
									"} else if (testCaseNumber == 3){ // Verify that the 'ids' parameters is not provided\r",
									"    pm.test(\"ids is blank\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(50);\r",
									"    });\r",
									"} else if (testCaseNumber == 4){ // Verify that the 'ids' parameters is null\r",
									"    pm.test(\"ids is null\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(0);\r",
									"    });\r",
									"} else if (testCaseNumber == 5){ // Verify that the 'ids' parameters contains uppercase letters, lowercase letters and number \r",
									"    pm.test(\"ids contains uppercase, lowercase letters and number\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(0);\r",
									"    });\r",
									"} else if (testCaseNumber == 6){ // Veriy that the 'ids' is invalid when containing special characters\r",
									"    pm.test(\"ids is invalid\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"    });\r",
									"} else if (testCaseNumber == 7){ // Verify that the \"created_at_max\"  parameter is in the correct format and a valid date \r",
									"    pm.test(\"created_at_max is correct format and a valid date \", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(33)\r",
									"    });\r",
									"}  else if (testCaseNumber == 8){ // Verify that the \"created_at_max\"  parameter is not data in the correct format and a valid date \r",
									"    pm.test(\"created_at_max is is not data\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(0)\r",
									"    });\r",
									"} else if (testCaseNumber == 9){ // Verify that the \"created_at_max\"  parameter is in the corect format and a future date  \r",
									"     pm.test(\"created_at_max is correct format and a future date\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(50)\r",
									"    });\r",
									"} else if (testCaseNumber == 10){ // Verify that the \"created_at_max\"  parameter is not in the corect format \r",
									"    pm.test(\"created_at_max is not in the corect format \", function(){\r",
									"        pm.expect(pm.response.code).to.eq(400);\r",
									"        pm.expect(responseBody.errors.created_at_max).to.eq(\"expected String to be a time\")\r",
									"    });\r",
									"} else if (testCaseNumber == 11){ //Verify that the \"created_at_max\"  parameter contains only numbers\r",
									"    pm.test(\"created_at_max contains only numbers\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(400);\r",
									"        pm.expect(responseBody.errors.created_at_max).to.eq(\"expected String to be a time\")\r",
									"    });\r",
									"} else if (testCaseNumber == 12){ //Verify that the \"created_at_max\"  parameter contains uppercase letters, lowercase letters and special characters\r",
									"    pm.test(\"created_at_max contains uppercase, lowercase letters and special characters\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(400);\r",
									"        pm.expect(responseBody.errors.created_at_max).to.eq(\"expected String to be a time\") \r",
									"    });\r",
									"}  else if (testCaseNumber == 13){ //Verify that the \"created_at_min\"  parameter is in the correct format and current day\r",
									"    pm.test(\"created_at_min is in the correct format and current day\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(0)\r",
									"    });\r",
									"}  else if (testCaseNumber == 14){ // Verify that the \"created_at_min\"  parameter is in the corect format and a future date  \r",
									"    pm.test(\"created_at_min is corect format and a future date\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(0)\r",
									"    });\r",
									"} else if (testCaseNumber == 15){ // Verify that the \"created_at_min\" parameter is not in the corect format \r",
									"    pm.test(\"created_at_min is not in the corect format\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(400);\r",
									"        pm.expect(responseBody.errors.created_at_min).to.eq(\"expected String to be a time\");\r",
									"    });\r",
									"} else if (testCaseNumber == 16){ // Verify that the \"created_at_min\"  parameter contains only numbers\r",
									"    pm.test(\"created_at_min contains only numbers\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(400);\r",
									"        pm.expect(responseBody.errors.created_at_min).to.eq(\"expected String to be a time\");\r",
									"    });\r",
									"}  else if (testCaseNumber == 17){ //Verify that the \"created_at_min\"  parameter contains uppercase letters, lowercase letters and special characters\r",
									"    pm.test(\"created_at_min contains uppercase letters, lowercase letters and special characters\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(400);       \r",
									"    });\r",
									"}  else if (testCaseNumber == 18){ //Verify that  \"created_at_max\" and \"created_at_min\"  contain valid dates\r",
									"    pm.test(\"created_at_min contains uppercase letters, lowercase letters and special characters\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(5)    \r",
									"    });\r",
									"} else if (testCaseNumber == 19){ //Verify that  \"created_at_max\" and \"created_at_min\"  are valid date and do not contain any data \r",
									"    pm.test(\"created_at_max and created_at_min are valid date and do not any data \", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(0)    \r",
									"    });\r",
									"}  else if (testCaseNumber == 20){ //Verify that \"fields\" parameter is null\r",
									"    pm.test(\"fields is null\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        responseBody.products.forEach(function(products, index){\r",
									"            pm.expect(products).to.eql({})\r",
									"        });\r",
									"    });\r",
									"}  else if (testCaseNumber == 21){ //Verify that \"fields\" parameter is blank \r",
									"    pm.test(\"fields is blank\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(pm.response.json()).to.have.jsonSchema(schema);\r",
									"    });\r",
									"} else if (testCaseNumber == 22){ //Verify that \"fields\" parameter is in correct format and 1 value \r",
									"    pm.test(\"fields has one value \", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        responseBody.products.forEach(function(product, index){\r",
									"            pm.expect(product).to.eql({})\r",
									"        });\r",
									"    });\r",
									"} else if (testCaseNumber == 23){ //Verify that \"fields\" parameter is in correct format and 3 value  \r",
									"    pm.test(\"fields has three value \", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products[0]).to.have.property(\"title\");\r",
									"        pm.expect(responseBody.products[0]).to.have.property(\"body_html\")\r",
									"        pm.expect(responseBody.products[0]).to.have.property(\"status\")\r",
									"    });\r",
									"\r",
									"} else if (testCaseNumber == 24){ //Verify that \"fields\" parameter is not in correct forrmat \r",
									"    pm.test(\"fields parameter is not in correct forrmat \", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        responseBody.products.forEach(function(product, index){\r",
									"            pm.expect(product).to.eql({})\r",
									"        });      \r",
									"    });\r",
									"} else if (testCaseNumber == 25){ //Verify that \"fields\" parameter does not exist\r",
									"    pm.test(\"fields does not exist\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(50)\r",
									"        responseBody.products.forEach(function(products, index){\r",
									"            pm.expect(products).to.eql({})\r",
									"        });\r",
									"    });\r",
									"} else if (testCaseNumber == 26){ //Verify that \"fields\" parameter contains numbers and special charaters\r",
									"    console.log(\"GGGG\")\r",
									"    pm.test(\"fields contains numbers and special charaters\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"    });\r",
									"} else if (testCaseNumber == 27){ //Verify that 'Handle' parameter is null\r",
									"    pm.test(\"Handle is null\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(0)\r",
									"    });\r",
									"}  else if (testCaseNumber == 28) { //Verify that 'Handle' parameter is blank \r",
									"    pm.test(\"Handle is blank\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(50)\r",
									"    });\r",
									"} else if (testCaseNumber == 29) { //Verify that 'Handle' parameter is valid value \r",
									"    pm.test(\"Handle is valid value \", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(1)\r",
									"        pm.expect(responseBody.products[0].handle).to.eq(\"23213131\")\r",
									"    });\r",
									"} else if (testCaseNumber == 30) { //Verify that 'Handle' parameter contains valid value and  invalid value\r",
									"    pm.test(\"Handle is valid and invalid value \", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(1)\r",
									"        pm.expect(responseBody.products[0].handle).to.eq(\"23213131\")\r",
									"    });\r",
									"}  else if (testCaseNumber == 31) { //Verify that 'Handle' parameter does not exist\r",
									"    pm.test(\"Handle does not exist\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(0)\r",
									"    });\r",
									"} else if (testCaseNumber == 32){ //Verify that 'Limit' parameter is null\r",
									"    pm.test(\"Limit is null\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(400);\r",
									"        pm.expect(responseBody.errors.limit).to.eq(\"expected String to be a Integer\")\r",
									"    });\r",
									"}  else if (testCaseNumber == 33) { //Verify that 'Limit' parameter is blank \r",
									"    pm.test(\"Limit is blank\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(1)\r",
									"    });\r",
									"} else if (testCaseNumber == 34) { //Verify that the input  'Limit' parameter is equal to 0  \r",
									"    pm.test(\"Limit is equal to 0\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(1)\r",
									"    });\r",
									"} else if (testCaseNumber == 35) { //Verify that the input  'Limit' parameter is equal to 250\r",
									"    pm.test(\"Limit is equal to 250\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(250)\r",
									"    });\r",
									"} else if (testCaseNumber == 36) { //Verify that the input  'Limit' parameter is equal to 251\r",
									"    pm.test(\"Limit is equal to 251\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(400);\r",
									"        pm.expect(responseBody.errors).to.eq(\"Limit exceeds maximum limit of 250\")\r",
									"    });\r",
									"}  else if (testCaseNumber == 37) { //Verify that the input  'Limit' parameter is a negative number\r",
									"    pm.test(\"Limit is  a negative number\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(1)\r",
									"    });\r",
									"} else if (testCaseNumber == 38) { //Verify that 'Limit' parameter contains uppercase letters, lowercase letters and number \r",
									"    pm.test(\"Limit contains uppercase, lowercase letters and number\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(400);\r",
									"        pm.expect(responseBody.errors.limit).to.eq(\"expected String to be a Integer\")\r",
									"    });\r",
									"} else if (testCaseNumber == 39) { //Verify that 'product_type' parameter is null\r",
									"    pm.test(\"product_type is null\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(0)\r",
									"    });\r",
									"} else if (testCaseNumber == 40) { //Verify that 'product_type' parameter is blank \r",
									"    pm.test(\"product_type is null\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(50)\r",
									"    });\r",
									"} else if (testCaseNumber == 41) { //Verify that 'product_type' parameter has a valid anh existing value \r",
									"    pm.test(\"product_type has a valid anh existing value\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(1);\r",
									"        pm.expect(responseBody.products[0].product_type).to.eq(\"Thu test product type\");\r",
									"    });\r",
									"} else if (testCaseNumber == 42) { //Verify that 'product_type' parameter does not exist  \r",
									"    pm.test(\"product_type does not exist \", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(0);\r",
									"    });\r",
									"} else if (testCaseNumber == 43) { //Verify that 'product_type' parameter contains uppercase letters, lowercase letters and number  \r",
									"    pm.test(\"product_type contains uppercase letters, lowercase letters and number\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(0);\r",
									"    });\r",
									"} else if (testCaseNumber == 44) { //Verify that 'published_status' parameter is null\r",
									"        pm.test(\"published_status is null\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(50);\r",
									"        });\r",
									"} else if (testCaseNumber == 45) { //Verify that 'published_status' parameter is blank \r",
									"        pm.test(\"published_status is blank\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products.length).to.eq(50);\r",
									"        pm.expect(responseBody.products[0].status).to.eq(\"archived\" || \"draft\" || \"active\"); \r",
									"        });\r",
									"} else if (testCaseNumber == 46) { //Verify that 'published_status' parameter is equal to 'published'\r",
									"        pm.test(\"published_status is blank\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products[0].status).to.eq(\"active\");\r",
									"        });\r",
									"} else if (testCaseNumber == 47) { //Verify that 'published_status' parameter is equal to 'unpublished'\r",
									"        pm.test(\"published_status is is equal to unpublished\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products[0].status).to.eq(\"archived\" || \"draft\"); \r",
									"        });\r",
									"} else if (testCaseNumber == 48) { //Verify that 'published_status' parameter is equal to 'any'\r",
									"        pm.test(\"published_status is is equal to any\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products[0].status).to.eq(\"archived\" || \"draft\" || \"active\"); \r",
									"        });\r",
									"} else if (testCaseNumber == 49) { //Verify that 'published_status' parameter is invalid\r",
									"        pm.test(\"published_status is invalid\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.products[0].status).to.eq(\"archived\" || \"draft\" || \"active\"); \r",
									"        });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var testCaseNumber = pm.variables.get(\"TC\");\r",
									"\r",
									"if (testCaseNumber == 2 // ids \r",
									"    || testCaseNumber == 3\r",
									"    || testCaseNumber == 4\r",
									"    || testCaseNumber == 5\r",
									"    || testCaseNumber == 6){\r",
									"        pm.request.addQueryParams(\"ids=\" + pm.variables.get(\"ids\"))\r",
									"        \r",
									"} else if (testCaseNumber == 7 //created_at_max\r",
									"    || testCaseNumber == 8\r",
									"    || testCaseNumber == 9\r",
									"    || testCaseNumber == 10\r",
									"    || testCaseNumber == 11\r",
									"    || testCaseNumber == 12){\r",
									"        pm.request.addQueryParams(\"created_at_max=\" + pm.variables.get(\"created_at_max\"))\r",
									"} else if (testCaseNumber == 13 //created_at_min\r",
									"    || testCaseNumber == 14\r",
									"    || testCaseNumber == 15\r",
									"    || testCaseNumber == 16\r",
									"    || testCaseNumber == 17){\r",
									"        pm.request.addQueryParams(\"created_at_min=\" + pm.variables.get(\"created_at_min\"))\r",
									"} else if (testCaseNumber == 18 //created_at_min and created_at_max \r",
									"    || testCaseNumber == 19){\r",
									"        pm.request.addQueryParams(\"created_at_min=\" + pm.variables.get(\"created_at_min\") + \"&\" + \"created_at_max=\" + pm.variables.get(\"created_at_max\"))\r",
									"\r",
									"} else if (testCaseNumber == 20 // fields\r",
									"    || testCaseNumber == 21\r",
									"    || testCaseNumber == 22\r",
									"    || testCaseNumber == 23\r",
									"    || testCaseNumber == 24\r",
									"    || testCaseNumber == 25\r",
									"    || testCaseNumber == 26){ \r",
									"        pm.request.addQueryParams(\"fields=\" + pm.variables.get(\"fields\"))\r",
									"\r",
									"} else if (testCaseNumber == 27 //Handle\r",
									"    || testCaseNumber == 28\r",
									"    || testCaseNumber == 29\r",
									"    || testCaseNumber == 30\r",
									"    || testCaseNumber == 31){ \r",
									"        pm.request.addQueryParams(\"handle=\" + pm.variables.get(\"handle\"))\r",
									"\r",
									"} else if (testCaseNumber == 32 //limit\r",
									"    || testCaseNumber == 33\r",
									"    || testCaseNumber == 34\r",
									"    || testCaseNumber == 35\r",
									"    || testCaseNumber == 36\r",
									"    || testCaseNumber == 37\r",
									"    || testCaseNumber == 38){ \r",
									"        pm.request.addQueryParams(\"limit=\" + pm.variables.get(\"limit\"))\r",
									"\r",
									"} else if (testCaseNumber == 39 //product_type\r",
									"    || testCaseNumber == 40\r",
									"    || testCaseNumber == 41\r",
									"    || testCaseNumber == 42\r",
									"    || testCaseNumber == 43){ \r",
									"        pm.request.addQueryParams(\"product_type=\" + pm.variables.get(\"product_type\"))\r",
									"\r",
									"} else if (testCaseNumber == 44 //published_status\r",
									"    || testCaseNumber == 45\r",
									"    || testCaseNumber == 46\r",
									"    || testCaseNumber == 47\r",
									"    || testCaseNumber == 48\r",
									"    || testCaseNumber == 49){ \r",
									"        pm.request.addQueryParams(\"published_status=\" + pm.variables.get(\"published_status\")) \r",
									"    }  "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/api/2024-01/products.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"api",
								"2024-01",
								"products.json"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{ids}}",
									"disabled": true
								},
								{
									"key": "created_at_max",
									"value": "2025-04-09T03:58:57-04:00",
									"disabled": true
								},
								{
									"key": "created_at_min",
									"value": "null",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "&^&^*(",
									"disabled": true
								},
								{
									"key": "handle",
									"value": "thu-1",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "adfgh&8675JJGG",
									"disabled": true
								},
								{
									"key": "presentment_currencies",
									"value": "10000",
									"disabled": true
								},
								{
									"key": "product_type",
									"value": "djdh^&7dh^&^76767*&&*&*&(%$#@",
									"disabled": true
								},
								{
									"key": "published_at_max",
									"value": "null",
									"disabled": true
								},
								{
									"key": "published_status",
									"value": "!@#^&*()%",
									"disabled": true
								},
								{
									"key": "since_id",
									"value": "11133988579804",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"disabled": true
								},
								{
									"key": "title",
									"value": "thuanh!@#$%^&*()",
									"disabled": true
								},
								{
									"key": "vendor",
									"value": "abc123!@%23^%26*()*(%",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Retrieve a single product",
			"item": [
				{
					"name": "Creat a new product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var option1Name = pm.variables.get(\"option1Name\");\r",
									"var option2Name = pm.variables.get(\"option2Name\");\r",
									"var option3Name = pm.variables.get(\"option3Name\");\r",
									"var option4Name = pm.variables.get(\"option4Name\");\r",
									"\r",
									"var  options = [ option1Name, option2Name, option3Name, option4Name]\r",
									"options.filter(optionName => optionName !== \"\"); // []\r",
									"options.map(optionName => ({name: optionName})); // [{name: mau sac}]\r",
									"\r",
									"var options = (\"options\", options);\r",
									"var optionsStringify = (optionsStringify, JSON.stringify(options));\r",
									"// options: [{\"name\": \"Mau sac\"}, {\"name\": \"Kich thuoc\"}, {\"name\": \"Chat lieu\"}]"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json().product",
									"console.log(pm.variables.get(\"product_id_new\"));",
									"pm.variables.set(\"product_id_new\", responseBody.id)",
									"console.log(pm.variables.get(\"product_id_new\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product\": {\r\n        \"title\": \"test product\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/api/2024-01/products.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"api",
								"2024-01",
								"products.json"
							]
						},
						"description": "  \nCreate a new product"
					},
					"response": []
				},
				{
					"name": "Retrieve a single product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testCaseNumber = pm.variables.get(\"TC\");\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"var schema = {\r",
									"    type: 'object',\r",
									"    properties: {\r",
									"        products: {\r",
									"            type: 'array',\r",
									"            items: {\r",
									"                type: 'object',\r",
									"                properties: {\r",
									"                    id: { type: 'integer' },\r",
									"                    title : {type: 'string'},\r",
									"                    body_html : {type: 'string'},\r",
									"                    product_type : {type: 'string'},\r",
									"                    created_at : {type: 'string', format: 'date-time'},\r",
									"                    handle : {type: 'string'},\r",
									"                    updated_at : {type: 'string', format: 'date-time'},\r",
									"                    published_at : {type: ['string', 'null']},\r",
									"                    tags : {type: 'string'}, \r",
									"                    status : {type: 'string'}, \r",
									"                    admin_graphql_api_id : {type: 'string'}, \r",
									"                    variants: {\r",
									"                        type: 'array',\r",
									"                        items: {\r",
									"                            type: 'object',\r",
									"                            properties: {\r",
									"                                id: {type: 'integer'},\r",
									"                                product_id: {type: 'integer'},\r",
									"                                title: {type: 'string'},\r",
									"                                price: {type: 'string'},\r",
									"                                sku: {type: 'string'},\r",
									"                                position: {type: 'number'},\r",
									"                                inventory_policy: {type: 'string'},\r",
									"                                compare_at_price: {type: ['number', 'null']},\r",
									"                                fulfillment_service: {type: 'string'},\r",
									"                                inventory_management: {type: ['string', 'null']},\r",
									"                                option1: {type: ['string', 'null']},\r",
									"                                option2: {type: ['string', 'null']},\r",
									"                                option3: {type: ['string', 'null']},\r",
									"                                created_at: {type: 'string', format:'date-time'},\r",
									"                                updated_at: {type: 'string', format:'date-time'},\r",
									"                                taxable: {type: 'boolean'},\r",
									"                                barcode: {type: ['string', 'null']},\r",
									"                                grams: {type: 'number'},\r",
									"                                weight: {type: 'number'},\r",
									"                                weight_unit: {type: 'string'},\r",
									"                                inventory_item_id: {type: 'integer'},\r",
									"                                inventory_quantity: {type: 'number'},\r",
									"                                old_inventory_quantity: {type: 'number'},\r",
									"                                requires_shipping: {type: 'boolean'},\r",
									"                                admin_graphql_api_id: {type: 'string'},\r",
									"                                image_id: {type: ['string', 'null']},\r",
									"                            },\r",
									"                            required: ['id', 'product_id', 'title', 'price', 'sku', 'position', 'inventory_policy', 'compare_at_price', 'fulfillment_service', 'inventory_management', 'option1', 'option2', 'option3', 'created_at', 'updated_at', 'taxable', 'barcode', 'grams', 'weight', 'weight_unit', 'inventory_item_id', 'inventory_quantity', 'old_inventory_quantity', 'requires_shipping', 'admin_graphql_api_id', 'image_id'],\r",
									"                            additionalProperties: false,\r",
									"                        }\r",
									"                    },\r",
									"                    options: {\r",
									"                        type: 'array',\r",
									"                        items: {\r",
									"                            type: 'object',\r",
									"                            properties: {\r",
									"                                id: {type: 'integer'},\r",
									"                                product_id: {type: 'integer'},\r",
									"                                name: {type: 'string'},\r",
									"                                position: {type: 'number'},\r",
									"                                values: {type: 'array'},\r",
									"                            },\r",
									"                            required: ['id', 'product_id', 'name', 'position', 'values'],\r",
									"                            additionalProperties: false,\r",
									"                        }\r",
									"                    },\r",
									"                \r",
									"                },\r",
									"            },\r",
									"            required: ['products'],\r",
									"        addtionalProperties: false,\r",
									"        },\r",
									"    },\r",
									"};\r",
									"\r",
									"if (testCaseNumber == 1){ // Verify that API returns stattus code: 200 and Json Schema is valid \r",
									"    pm.test(\"Normal case\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody).to.have.jsonSchema(schema);\r",
									"     });\r",
									"} else if (testCaseNumber == 2){ // Verrify that the 'id' parameter cotains uppercase and lowcase letters\r",
									"    pm.test(\"'id' cotains uppercase and lowcase letters\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(400);\r",
									"        pm.expect(responseBody.errors.id).to.eq(\"expected String to be a id\");\r",
									"    });\r",
									"} else if (testCaseNumber == 3){ // Verrify that the 'id' parameter does not exist\r",
									"    pm.test(\"'id' does not exist\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(404);\r",
									"        pm.expect(responseBody.errors).to.eq(\"Not Found\");\r",
									"    });\r",
									"} else if (testCaseNumber == 4){ // Verrify that the 'fields' parameter is blank \r",
									"    pm.test(\"'id' does not exist\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody).to.have.jsonSchema(schema);\r",
									"    });\r",
									"} else if (testCaseNumber == 5){ // Verrify that the 'fields' parameter is null\r",
									"    pm.test(\"'fields' is null\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product).to.eql({})\r",
									"    });\r",
									"} else if (testCaseNumber == 6){ // Verrify that the 'fields' parameter does not exist\r",
									"    pm.test(\"'fields' does not exist\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product).to.eql({})\r",
									"    });\r",
									"} else if (testCaseNumber == 7){ // Verrify that the 'fields' parameter is not correct format\r",
									"    pm.test(\"'fields' is not correct format\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product).to.eql({})\r",
									"    });\r",
									"} else if (testCaseNumber == 8){ // Verrify that the 'fields' parameter is one value\r",
									"    pm.test(\"'fields'is one value\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product).to.have.property(\"published_scope\")\r",
									"    });\r",
									"} else if (testCaseNumber == 9){ // Verrify that the 'fields' parameter is three value\r",
									"    pm.test(\"'fields' is not correct format\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product).to.have.property(\"variants\")\r",
									"        pm.expect(responseBody.product).to.have.property(\"status\")\r",
									"        pm.expect(responseBody.product).to.have.property(\"handle\")\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var testCaseNumber = pm.variables.get(\"TC\")\r",
									"\r",
									" if (testCaseNumber == 4\r",
									"    || testCaseNumber == 5\r",
									"    || testCaseNumber == 6\r",
									"    || testCaseNumber == 7\r",
									"    || testCaseNumber == 8\r",
									"    || testCaseNumber == 9){\r",
									"        pm.request.addQueryParams(\"fields=\" + pm.variables.get(\"fields\"))\r",
									"    }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/api/2024-01/products/{{product_id}}.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"api",
								"2024-01",
								"products",
								"{{product_id}}.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Retrieve a count of products",
			"item": [
				{
					"name": "Count total of products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json()",
									"",
									"var totalCount =  responseBody.count",
									"",
									"pm.variables.set(\"baseCount\", totalCount);",
									"pm.variables.set(\"baseTime\", pm.variables.replaceIn(\"{{$isoTimestamp}}\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var testCaseNumber = pm.variables.get(\"TC\")\r",
									"\r",
									"if(testCaseNumber == 2 // created_at_max\r",
									"|| testCaseNumber == 3\r",
									"|| testCaseNumber == 4\r",
									"|| testCaseNumber == 5\r",
									"|| testCaseNumber == 6\r",
									"|| testCaseNumber == 7){\r",
									"    pm.request.addQueryParams(\"created_at_max=\" + pm.variables.get(\"created_at_max\"))\r",
									"\r",
									"} else if(testCaseNumber == 9 //created_at_min\r",
									"|| testCaseNumber == 10\r",
									"|| testCaseNumber == 11\r",
									"|| testCaseNumber == 12\r",
									"|| testCaseNumber == 13){\r",
									"    pm.request.addQueryParams(\"created_at_min=\" + pm.variables.get(\"created_at_min\"))\r",
									"\r",
									"} else if(testCaseNumber == 8 //created_at_min & created_at_max\r",
									"|| testCaseNumber == 14\r",
									"|| testCaseNumber == 15){\r",
									"    pm.request.addQueryParams(\"created_at_min=\" + pm.variables.get(\"created_at_min\") + \"&\" + \"created_at_max=\" + pm.variables.get(\"created_at_max\"))\r",
									"\r",
									"} else if(testCaseNumber == 16 //product_type\r",
									"|| testCaseNumber == 17\r",
									"|| testCaseNumber == 18){\r",
									"    pm.request.addQueryParams(\"product_type=\" + pm.variables.get(\"productType\"))\r",
									"\r",
									"} else if(testCaseNumber == 19 //published_status\r",
									"|| testCaseNumber == 20\r",
									"|| testCaseNumber == 21\r",
									"|| testCaseNumber == 22\r",
									"|| testCaseNumber == 23){\r",
									"    pm.request.addQueryParams(\"published_status=\" + pm.variables.get(\"published_status\"))\r",
									"\r",
									"} else if(testCaseNumber == 24 //vendor\r",
									"|| testCaseNumber == 25\r",
									"|| testCaseNumber == 26){\r",
									"    pm.request.addQueryParams(\"vendor=\" + pm.variables.get(\"vendor\"))\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/api/2024-01/products/count.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"api",
								"2024-01",
								"products",
								"count.json"
							]
						},
						"description": "\nThis endpoint makes an HTTP GET request to retrieve the count of products created before a specified timestamp. The `created_at_max` query parameter is used to filter the products based on their creation date. The response returns a JSON object with the count of products that meet the specified criteria.\n\nTo add a function to count the time to the current date, you can use the current timestamp and calculate the time difference between the current date and the `created_at_max` timestamp.\n"
					},
					"response": []
				},
				{
					"name": "Create a new product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product\": {\r\n        \"title\": \"test\",\r\n        \"product_type\": \"thu test product_type 10/05\",\r\n        \"status\": \"{{status}}\",\r\n        \"vendor\": \"{{ProductVendor}}\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/api/2024-01/products.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"api",
								"2024-01",
								"products.json"
							]
						},
						"description": "  \nCreate a new product"
					},
					"response": []
				},
				{
					"name": "Count of products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testCaseNumber = pm.variables.get(\"TC\")",
									"var responseBody = pm.response.json()",
									"var count = responseBody.count",
									"var baseCount = pm.variables.get(\"baseCount\")",
									"",
									"",
									"if (testCaseNumber == 1){// Verify that the API returns status code: 200 ",
									"    pm.test(\"normal case\", function(){",
									"        pm.expect(pm.response.code).to.eq(200);",
									"      ",
									"    });        ",
									"} else if(testCaseNumber == 2){ // Verify that the \"created_at_max\"  parameter is in the curent day",
									"    pm.test(\"created_at_max is in the curent day\", function(){",
									"        pm.expect(pm.response.code).to.eq(200)",
									"        pm.expect(count).to.eq(baseCount +1)",
									"    });",
									"} else if(testCaseNumber == 3){ //Verify that the \"created_at_max\"  parameter is not data in the correct format and a valid date ",
									"    pm.test(\"created_at_max is not data\", function(){",
									"        pm.expect(pm.response.code).to.eq(200)",
									"        pm.expect(count).to.eq(0)      ",
									"    });",
									"} else if(testCaseNumber == 4){ //Verify that the \"created_at_max\"  parameter is in the corect format and a future date  ",
									"    pm.test(\"created_at_max is in the future date  \", function(){",
									"        pm.expect(pm.response.code).to.eq(200)",
									"        pm.expect(count).to.eq(baseCount +1)  ",
									"    });",
									"} else if(testCaseNumber == 5){ //Verify that the \"created_at_max\"  parameter is not in the corect format ",
									"    pm.test(\"created_at_max is not in the corect format \", function(){",
									"        pm.expect(pm.response.code).to.eq(400)",
									"        pm.expect(responseBody.errors.created_at_max).to.eq(\"expected String to be a Time\")   ",
									"    });",
									"} else if(testCaseNumber == 6){ //Verify that the \"created_at_max\"  parameter contains only numbers",
									"    pm.test(\"created_at_max is only numbers \", function(){",
									"        pm.expect(pm.response.code).to.eq(400)",
									"        pm.expect(responseBody.errors.created_at_max).to.eq(\"expected String to be a Time\") ",
									"    });",
									"} else if(testCaseNumber == 7){ //Verify that the \"created_at_max\"  parameter contains uppercase letters, lowercase letters and special characters",
									"    pm.test(\"created_at_max contains uppercase letters, lowercase letters and special characters\", function(){",
									"        pm.expect(pm.response.code).to.eq(400)",
									"        pm.expect(responseBody.errors.created_at_max).to.eq(\"expected String to be a Time\") ",
									"    });",
									"} else if(testCaseNumber == 8){ //Verify that the \"created_at_min\"  parameter is in the correct format and a valid date ",
									"    pm.test(\"created_at_min is in the correct format and a valid date\", function(){",
									"        pm.expect(pm.response.code).to.eq(200)",
									"        pm.expect(count).to.eq(978)    ",
									"    });",
									"} else if(testCaseNumber == 9){ //Verify that the \"created_at_min\"  parameter is in the correct format and current day ",
									"    pm.test(\"created_at_min is in the current day \", function(){",
									"        pm.expect(pm.response.code).to.eq(200)",
									"        pm.expect(count).to.eq(0)    ",
									"    });",
									"} else if(testCaseNumber == 10){ //Verify that the \"created_at_min\"  parameter is in the corect format and a future date   ",
									"    pm.test(\"created_at_min is in the future date\", function(){",
									"        pm.expect(pm.response.code).to.eq(200)",
									"        pm.expect(count).to.eq(0)    ",
									"    });",
									"} else if(testCaseNumber == 11){ //Verify that the \"created_at_min\"  parameter is not in the corect format  ",
									"    pm.test(\"created_at_min is  not in the corect format\", function(){",
									"        pm.expect(pm.response.code).to.eq(400)",
									"        pm.expect(responseBody.errors.created_at_min).to.eq(\"expected String to be a Time\")  ",
									"    });",
									"} else if(testCaseNumber == 12){ //Verify that the \"created_at_min\"  parameter contains only numbers",
									"    pm.test(\"created_at_min contains only numbers\", function(){",
									"        pm.expect(pm.response.code).to.eq(400)",
									"        pm.expect(responseBody.errors.created_at_min).to.eq(\"expected String to be a Time\")  ",
									"    });",
									"} else if(testCaseNumber == 13){ //Verify that the \"created_at_min\"  parameter contains uppercase letters, lowercase letters and special characters",
									"    pm.test(\"created_at_min contains uppercase letters, lowercase letters and special characters\", function(){",
									"        pm.expect(pm.response.code).to.eq(400)",
									"        pm.expect(responseBody.errors.created_at_min).to.eq(\"expected String to be a Time\")  ",
									"    });",
									"} else if(testCaseNumber == 14){ //Verify that  \"created_at_max\" and \"created_at_min\"  contain valid dates",
									"    pm.test(\"created_at_max and created_at_min contain valid dates\", function(){",
									"        pm.expect(pm.response.code).to.eq(200)",
									"        pm.expect(count).to.eq(1)  ",
									"    });",
									"} else if(testCaseNumber == 15){ //Verify that  \"created_at_max\" and \"created_at_min\"  are not correct format ",
									"    pm.test(\"created_at_max and created_at_min  are not correct format \", function(){",
									"        pm.expect(pm.response.code).to.eq(400)",
									"        pm.expect(responseBody.errors.created_at_min).to.eq(\"expected String to be a Time\")  ",
									"    });",
									"",
									"}  else if(testCaseNumber == 16){ //Verify that 'product_type' parameter is valid ",
									"     pm.test(\"product_type is valid \", function(){",
									"        pm.expect(pm.response.code).to.eq(200)",
									"        pm.expect(count).to.eq(baseCount + 1)",
									"    });",
									"}  else if(testCaseNumber == 17){ //Verify that 'product_type' parameter does not exsit ",
									"     pm.test(\"product_type does not exsit\", function(){",
									"        pm.expect(pm.response.code).to.eq(200)",
									"        pm.expect(count).to.eq(0)",
									"    });",
									"}  else if(testCaseNumber == 18){ //Verify that the 'product_type'  parameter contains uppercase letters, lowercase letters and special characters",
									"     pm.test(\"product_type contains uppercase letters, lowercase letters and special characters\", function(){",
									"        pm.expect(pm.response.code).to.eq(200)",
									"        pm.expect(count).to.eq(0)",
									"    });",
									"}  else if(testCaseNumber == 19){ //Verify that the 'published_status'  parameter is  published ",
									"     pm.test(\"published_status is  published \", function(){",
									"        pm.expect(pm.response.code).to.eq(200)",
									"        pm.expect(count).to.eq(baseCount + 1)",
									"    });",
									"}  else if(testCaseNumber == 20){ //Verify that the 'published_status'  parameter is  unpublished with status : draft",
									"     pm.test(\"published_status is unpublished with status : draft \", function(){",
									"        pm.expect(pm.response.code).to.eq(200)",
									"        pm.expect(count).to.eq(baseCount + 1)",
									"    });",
									"}  else if(testCaseNumber == 21){ //Verify that the 'published_status'  parameter is  unpublished with status : archived",
									"     pm.test(\"published_status is unpublished with status : archived\", function(){",
									"        pm.expect(pm.response.code).to.eq(200)",
									"        pm.expect(count).to.eq(baseCount + 1)",
									"    });",
									"}  else if(testCaseNumber == 22){ //Verify that the 'published_status'  parameter is  any",
									"     pm.test(\"published_status is any\", function(){",
									"        pm.expect(pm.response.code).to.eq(200)",
									"        pm.expect(count).to.eq(baseCount + 1)",
									"    });",
									"}  else if(testCaseNumber == 23){ //Verify that the 'published_status'  parameter contains uppercase letters, lowercase letters and special characters",
									"     pm.test(\"published_status contains uppercase letters, lowercase letters and special characters\", function(){",
									"        pm.expect(pm.response.code).to.eq(200)",
									"        pm.expect(count).to.eq(baseCount + 1)",
									"    });",
									"}  else if(testCaseNumber == 24){ //Verify that 'vendor' parameter is valid ",
									"     pm.test(\"Verify that 'vendor' parameter is valid \", function(){",
									"        pm.expect(pm.response.code).to.eq(200)",
									"        pm.expect(count).to.eq(baseCount + 1)",
									"    });",
									"}  else if(testCaseNumber == 25){ //Verify that 'vendor' parameter does not exsit ",
									"     pm.test(\"vendor does not exsit\", function(){",
									"        pm.expect(pm.response.code).to.eq(200)",
									"        pm.expect(count).to.eq(0)",
									"    });",
									"}  else if(testCaseNumber == 25){ //Verify that the 'vendor'  parameter contains uppercase letters, lowercase letters and special characters ",
									"     pm.test(\"vendor contains uppercase letters, lowercase letters and special characters \", function(){",
									"        pm.expect(pm.response.code).to.eq(200)",
									"        pm.expect(count).to.eq(0)",
									"    });",
									"}",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var testCaseNumber = pm.variables.get(\"TC\")\r",
									"\r",
									"\r",
									"if(testCaseNumber == 2 // created_at_max\r",
									"|| testCaseNumber == 3\r",
									"|| testCaseNumber == 4\r",
									"|| testCaseNumber == 5\r",
									"|| testCaseNumber == 6\r",
									"|| testCaseNumber == 7){\r",
									"    pm.request.addQueryParams(\"created_at_max=\" + pm.variables.get(\"created_at_max\"))\r",
									"\r",
									"} else if(testCaseNumber == 9 // created_at_min\r",
									"|| testCaseNumber == 10\r",
									"|| testCaseNumber == 11\r",
									"|| testCaseNumber == 12\r",
									"|| testCaseNumber == 13){\r",
									"    pm.request.addQueryParams(\"created_at_min=\" + pm.variables.get(\"created_at_min\"))\r",
									"\r",
									"} else if(testCaseNumber == 8 //created_at_min & created_at_max\r",
									"|| testCaseNumber == 14\r",
									"|| testCaseNumber == 15){\r",
									"    pm.request.addQueryParams(\"created_at_min=\" + pm.variables.get(\"created_at_min\") + \"&\" + \"created_at_max=\" + pm.variables.get(\"created_at_max\"))\r",
									"\r",
									"} else if(testCaseNumber == 16 //product_type\r",
									"|| testCaseNumber == 17\r",
									"|| testCaseNumber == 18){\r",
									"    pm.request.addQueryParams(\"product_type=\" + pm.variables.get(\"productType\"))\r",
									"\r",
									"} else if(testCaseNumber == 19 //published_status\r",
									"|| testCaseNumber == 20\r",
									"|| testCaseNumber == 21\r",
									"|| testCaseNumber == 22\r",
									"|| testCaseNumber == 23){\r",
									"    pm.request.addQueryParams(\"published_status=\" + pm.variables.get(\"published_status\"))\r",
									"\r",
									"} else if(testCaseNumber == 24 //vendor\r",
									"|| testCaseNumber == 25\r",
									"|| testCaseNumber == 26){\r",
									"    pm.request.addQueryParams(\"vendor=\" + pm.variables.get(\"vendor\"))\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/api/2024-01/products/count.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"api",
								"2024-01",
								"products",
								"count.json"
							],
							"query": [
								{
									"key": "created_at_min",
									"value": "{{baseTime}}",
									"disabled": true
								},
								{
									"key": "product_type",
									"value": "null ",
									"disabled": true
								},
								{
									"key": "created_at_max",
									"value": "{{$isoTimestamp}}",
									"disabled": true
								}
							]
						},
						"description": "\nThis endpoint makes an HTTP GET request to retrieve the count of products created before a specified timestamp. The `created_at_max` query parameter is used to filter the products based on their creation date. The response returns a JSON object with the count of products that meet the specified criteria.\n\nTo add a function to count the time to the current date, you can use the current timestamp and calculate the time difference between the current date and the `created_at_max` timestamp.\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Updates a product",
			"item": [
				{
					"name": "Create a new product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var option1Name = pm.variables.get(\"option1Name\");\r",
									"var option2Name = pm.variables.get(\"option2Name\");\r",
									"var option3Name = pm.variables.get(\"option3Name\");\r",
									"var option4Name = pm.variables.get(\"option4Name\");\r",
									"\r",
									"var  options = [ option1Name, option2Name, option3Name, option4Name]\r",
									"options.filter(optionName => optionName !== \"\"); // []\r",
									"options.map(optionName => ({name: optionName})); // [{name: mau sac}]\r",
									"\r",
									"var options = (\"options\", options);\r",
									"var optionsStringify = (optionsStringify, JSON.stringify(options));\r",
									"// options: [{\"name\": \"Mau sac\"}, {\"name\": \"Kich thuoc\"}, {\"name\": \"Chat lieu\"}]"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var product = pm.response.json().product",
									"console.log(product.id)",
									"pm.variables.set(\"productID\", product.id)",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"product\": {\r\n    \"title\": \"Test update product\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/api/2024-01/products.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"api",
								"2024-01",
								"products.json"
							]
						},
						"description": "  \nCreate a new product"
					},
					"response": []
				},
				{
					"name": "Updates a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testCaseNumber = pm.variables.get(\"TC\")\r",
									"var responseBody = pm.response.json()\r",
									"var productTitle = pm.variables.get(\"productTitle\");\r",
									"var body_html = pm.variables.get(\"bodyHtml\")\r",
									"var vendor = pm.variables.get(\"vendor\");\r",
									"var product_type = pm.variables.get(\"product_type\");\r",
									"var status = pm.variables.get(\"status\");\r",
									"var template_suffix = pm.variables.get(\"template_suffix\");\r",
									"var options = pm.variables.get(\"options\");\r",
									"var option1Value = pm.variables.get(\"option1Value\");\r",
									"var option2Value = pm.variables.get(\"option2Value\");\r",
									"var option3Value = pm.variables.get(\"option3Value\");\r",
									"\r",
									"\r",
									"if (testCaseNumber == 1){ // Normal case: Status code : 200 and Json schema is valid \r",
									"    pm.test(\"Normal case\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"            var schema = {\r",
									"            type: \"object\",\r",
									"            properties: {\r",
									"            product: {\r",
									"                type: \"object\",\r",
									"                properties: {\r",
									"                id: { type: \"integer\" },\r",
									"                title: { type: \"string\" },\r",
									"                body_html: { type: \"string\" },\r",
									"                vendor: { type: \"string\" },\r",
									"                product_type: { type: \"string\" },\r",
									"                created_at: { type: \"string\" },\r",
									"                handle: { type: \"string\" },\r",
									"                updated_at: { type: \"string\" },\r",
									"                published_at: { type: [\"string\", \"null\"], format: \"date-time\" },\r",
									"                template_suffix: { type: [\"string\", \"null\"] },\r",
									"                published_scope: { type: \"string\" },\r",
									"                tags: { type: \"string\" },\r",
									"                status: { type: \"string\" },\r",
									"                admin_graphql_api_id: { type: \"string\" },\r",
									"                variants: {\r",
									"                    type: \"array\",\r",
									"                    items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        product_id: { type: \"integer\" },\r",
									"                        title: { type: \"string\" },\r",
									"                        price: { type: [\"string\", \"null\"] },\r",
									"                        sku: { type: \"string\" },\r",
									"                        position: { type: \"integer\" },\r",
									"                        inventory_policy: { type: \"string\" },\r",
									"                        compare_at_price: { type: [\"number\", \"null\"] },\r",
									"                        fulfillment_service: { type: \"string\" },\r",
									"                        inventory_management: { type: [\"string\", \"null\"] },\r",
									"                        option1: { type: [\"string\", \"null\"] },\r",
									"                        option2: { type: [\"string\", \"null\"] },\r",
									"                        option3: { type: [\"string\", \"null\"] },\r",
									"                        created_at: { type: \"string\" },\r",
									"                        updated_at: { type: \"string\" },\r",
									"                        taxable: { type: \"boolean\" },\r",
									"                        barcode: { type: [\"string\", \"null\"] },\r",
									"                        grams: { type: \"integer\" },\r",
									"                        weight: { type: \"integer\" },\r",
									"                        weight_unit: { type: \"string\" },\r",
									"                        inventory_item_id: { type: \"integer\" },\r",
									"                        inventory_quantity: { type: \"integer\" },\r",
									"                        old_inventory_quantity: { type: \"integer\" },\r",
									"                        requires_shipping: { type: \"boolean\" },\r",
									"                        admin_graphql_api_id: { type: \"string\" },\r",
									"                        image_id: { type: [\"integer\", \"null\"] },\r",
									"                    },\r",
									"                    required: [\r",
									"                        \"id\",\r",
									"                        \"product_id\",\r",
									"                        \"title\",\r",
									"                        \"price\",\r",
									"                        \"sku\",\r",
									"                        \"position\",\r",
									"                        \"inventory_policy\",\r",
									"                        \"compare_at_price\",\r",
									"                        \"fulfillment_service\",\r",
									"                        \"inventory_management\",\r",
									"                        \"option1\",\r",
									"                        \"option2\",\r",
									"                        \"option3\",\r",
									"                        \"created_at\",\r",
									"                        \"updated_at\",\r",
									"                        \"taxable\",\r",
									"                        \"barcode\",\r",
									"                        \"grams\",\r",
									"                        \"weight\",\r",
									"                        \"weight_unit\",\r",
									"                        \"inventory_item_id\",\r",
									"                        \"inventory_quantity\",\r",
									"                        \"old_inventory_quantity\",\r",
									"                        \"requires_shipping\",\r",
									"                        \"admin_graphql_api_id\",\r",
									"                        \"image_id\",\r",
									"                    ],\r",
									"                    additionalProperties: false,\r",
									"                    },\r",
									"                },\r",
									"                options: {\r",
									"                    type: \"array\",\r",
									"                    items: {\r",
									"                    type: \"object\",\r",
									"                    properties: {\r",
									"                        id: { type: \"integer\" },\r",
									"                        product_id: { type: \"integer\" },\r",
									"                        name: { type: \"string\" },\r",
									"                        position: { type: \"integer\" },\r",
									"                        values: { type: \"array\" },\r",
									"                    },\r",
									"                    required: [\"id\", \"product_id\", \"name\", \"position\", \"values\"],\r",
									"                    additionalProperties: false,\r",
									"                    },\r",
									"                },\r",
									"                images: { type: \"array\" },\r",
									"                image: { type: [\"string\", \"null\"] },\r",
									"                },\r",
									"                required: [\r",
									"                \"id\",\r",
									"                \"title\",\r",
									"                \"body_html\",\r",
									"                \"vendor\",\r",
									"                \"product_type\",\r",
									"                \"created_at\",\r",
									"                \"handle\",\r",
									"                \"updated_at\",\r",
									"                \"published_at\",\r",
									"                \"template_suffix\",\r",
									"                \"published_scope\",\r",
									"                \"tags\",\r",
									"                \"status\",\r",
									"                \"admin_graphql_api_id\",\r",
									"                \"variants\",\r",
									"                \"options\",\r",
									"                \"images\",\r",
									"                \"image\",\r",
									"                ],\r",
									"                additionalProperties: false,\r",
									"            },\r",
									"            },\r",
									"            required: [\"product\"],\r",
									"            additionalProperties: false,\r",
									"        };\r",
									"        pm.expect(pm.response).to.have.jsonSchema \r",
									"    })\r",
									"} else if (testCaseNumber == 2){ // Verify that the \"Title\" returns a response the same as the request \r",
									"    pm.test(\"Test title is valid\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200)\r",
									"        pm.expect(responseBody.product.title).to.eql(productTitle);\r",
									"    });  \r",
									"} else if (testCaseNumber == 3){ // Title is blank \r",
									"    pm.test(\"Title is blank\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(422);\r",
									"        pm.expect(responseBody.errors.title[0]).to.eq(\"can't be blank\");\r",
									"    });\r",
									"} else if (testCaseNumber == 4){ // Title is greater than 255 characters\r",
									"    pm.test(\"Title is greater than 255 characters\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(422);\r",
									"        pm.expect(responseBody.errors.title[0]).to.eq(\"is too long (maximum is 255 characters)\");\r",
									"    });\r",
									"} else if (testCaseNumber == 5){ // Verify that the Body_html returns response the same as the request, including HTML tag \r",
									"    pm.test(\"test body_html is valid\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.body_html).to.eq(body_html);\r",
									"    });\r",
									"} else if (testCaseNumber == 6){ // Body_html is blank \r",
									"    pm.test(\"Body_html is blank\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.body_html).to.eq(body_html);\r",
									"    });\r",
									"} else if (testCaseNumber == 7){ // Verify that the Vendor returns response the same as the request\r",
									"    pm.test(\"Vendor is valid\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.vendor).to.eq(vendor)\r",
									"    });\r",
									"} else if (testCaseNumber == 8){ // Vendor is blank\r",
									"    pm.test(\"Vendor is blank\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.vendor).to.eq(\"anhthu\")\r",
									"    });\r",
									"} else if (testCaseNumber == 9){ // Vendor is greater than 255 characters\r",
									"    pm.test(\"Vendor is greater than 255 characters\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(422);\r",
									"        pm.expect(responseBody.errors.vendor[0]).to.eql(\"is too long (maximum is 255 characters)\"); \r",
									"    });\r",
									"} else if (testCaseNumber == 10){ // Verify that the product_type returns the response the same as the request \r",
									"    pm.test(\"product_type is valid\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.product_type).to.eql(product_type);\r",
									"    });\r",
									"} else if (testCaseNumber == 11){ // Product_title is blank \r",
									"    pm.test(\"Product_title is blank\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.product_type).to.eql(product_type);\r",
									"    });\r",
									"} else if (testCaseNumber == 12){ // Product_title is is greater than 255 characters\r",
									"    pm.test(\"Product_title is is greater than 255 characters\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(422);\r",
									"        pm.expect(responseBody.errors.title[0]).to.eql(\"is too long (maximum is 255 characters)\");\r",
									"    });\r",
									"} else if (testCaseNumber == 13){ // Verify that the status returns 'draft' the same as in the request \r",
									"    pm.test(\"status is draft\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.status).to.eql(\"draft\");\r",
									"    });\r",
									"} else if (testCaseNumber == 14){ // Verify that the status returns 'archived' the same as in the request \r",
									"    pm.test(\"status is archived\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.status).to.eql(\"archived\");\r",
									"    });\r",
									"} else if (testCaseNumber == 15){ // Verify that the status returns 'active' the same as in the request \r",
									"    pm.test(\"status is active\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.status).to.eql(\"active\");\r",
									"    });\r",
									"} else if (testCaseNumber == 16){ // Verify that the status returns an errors message when the request body contains an invalid value \r",
									"    pm.test(\"status is invalid\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(422);\r",
									"        pm.expect(responseBody.errors.status[0]).to.eq(\"isn't valid. Set the status as active, draft, or archived.\"); \r",
									"    })\r",
									"} else if (testCaseNumber == 17){ // status is blank \r",
									"    pm.test(\"status is blank\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(422);\r",
									"        pm.expect(responseBody.errors.status[0]).to.eq(\"isn't valid. Set the status as active, draft, or archived.\"); \r",
									"    });\r",
									"} else if (testCaseNumber == 18){ // Verify that the request body 'handle' is the same as the previously generated 'handle'\r",
									"    pm.test(\"handle is the same as the prviously gennerated\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200); \r",
									"        pm.expect(responseBody.product.handle).to.include(\"product-title-update\")\r",
									"    })\r",
									"} else if (testCaseNumber == 19){ // Verify that the reuquest body 'handle' is not the same as the previously generated 'handle'\r",
									"    pm.test(\"handle is not the same as the prviously gennerated\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"    });\r",
									"} else if (testCaseNumber == 20){ // handle is blank \r",
									"    pm.test(\"handle is blank\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.handle).to.include(\"ten-san-pham-p\");\r",
									"    });\r",
									"} else if (testCaseNumber == 21){ // template_suffix is blank \r",
									"    pm.test(\"template_suffix is blank \", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.template_suffix).to.eq(template_suffix);\r",
									"    });\r",
									"} else if (testCaseNumber == 22){ // Verify that the template_suffix returns the same as the request body  \r",
									"    pm.test(\"template_suffix is valid \", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.template_suffix).to.eq(template_suffix);\r",
									"        });\r",
									"} else if (testCaseNumber == 23){ // Verify that the 'published_at' when the status is set to 'active'\r",
									"    pm.test(\"published_at is valid with status active\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"\r",
									"    });\r",
									"} else if (testCaseNumber == 24){ // Verify that the 'published_at' when the status is set to 'archived'\r",
									"     pm.test(\"published_at with status archived\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.published_at).to.eq(null);\r",
									"    });\r",
									"} else if (testCaseNumber == 25){ // Verify that the 'published_at' when the status is set to ' draft '\r",
									"     pm.test(\"published_at with status draft\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.published_at).to.eq(null);\r",
									"    });\r",
									"} else if (testCaseNumber == 26){ // Verify that the 'published_scope' : web when the status is set to 'active'\r",
									"    pm.test(\"published_scope: web with the status active\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.published_scope).to.eq(\"web\");\r",
									"    });\r",
									"} else if (testCaseNumber == 27){ // Verify that the 'published_scope' : global when the status is set to 'active'\r",
									"    pm.test(\"published_scope: global with the status active\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.published_scope).to.eq(\"global\");\r",
									"    });\r",
									"} else if (testCaseNumber == 28){ // Verify that the 'published_scope' is blank when the status is set to 'active'\r",
									"    pm.test(\"published_scope: blank with the status active\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.published_scope).to.eq(\"global\");\r",
									"    });\r",
									"} else if (testCaseNumber == 29){ // Verify that the 'published_scope' : web when the status is set to 'archived'\r",
									"     pm.test(\"published_scope: web with the status archived\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.published_scope).to.eq(\"web\");\r",
									"     });\r",
									"} else if (testCaseNumber == 30){ // Verify that the 'published_scope' : global when the status is set to 'archived'\r",
									"     pm.test(\"published_scope: global with the status archived\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.published_scope).to.eq(\"web\");\r",
									"     });\r",
									"} else if (testCaseNumber == 31){ // Verify that the 'published_scope' : web when the status is set to 'draft'\r",
									"     pm.test(\"published_scope: web with the status draft\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.published_scope).to.eq(\"web\");\r",
									"     });\r",
									"} else if (testCaseNumber == 32){ // Verify that the 'published_scope' : global when the status is set to 'draft'\r",
									"     pm.test(\"published_scope: global with the status draft\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.published_scope).to.eq(\"web\");\r",
									"     });\r",
									"}  else if (testCaseNumber == 33){ // Verify that the request body include 'published_scope' with a value different from 'web' and 'global'\r",
									"     pm.test(\"published_scope with a value different web and global \", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.published_scope).to.eq(\"global\");\r",
									"     });\r",
									"}  else if (testCaseNumber == 34){ // Verify that the 'published_scope' is blank when the status is set to 'archived'\r",
									"     pm.test(\"published_scope is blank with status archived \", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.published_scope).to.eq(\"web\");\r",
									"     });\r",
									"} else if (testCaseNumber == 35){ //Verify that the request body returns default 'options', sending an empty array \r",
									"    pm.test(\"default options, sending an empty array\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200); \r",
									"        pm.expect(responseBody.product.options.length).to.eq(1);\r",
									"    })\r",
									"} else if (testCaseNumber == 36){ // Request body includes 'options', sending an empty value \"\"\r",
									"    pm.test(\"options when sending an empty value\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(400);\r",
									"        pm.expect(responseBody.errors.options).to.eq(\"expected String to be a Array\");\r",
									"    });\r",
									"} else if (testCaseNumber == 37){ // Request body includes  'options' that send the \"null\" value \r",
									"    pm.test(\"default options, sending the null value\", function(){\r",
									"        pm.expect(pm.response.code).to.eq(200); \r",
									"        pm.expect(responseBody.product.options.length).to.eq(1);\r",
									"    });\r",
									"} else if (testCaseNumber == 38){ //Request body includes  'options' that send an empty variant \r",
									"    pm.test(\"options with 1 empty variants\", function() {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"        pm.expect(responseBody.product.options.length).to.eq(1);\r",
									"    });\r",
									"} else if (testCaseNumber == 39){ //Request body includes  'options' that send an variant of options\r",
									"    pm.test(\"options when sending an variant of options\", function() {\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.options.length).to.eq(1);\r",
									"    });\r",
									"} else if (testCaseNumber == 40){ // Request body includes  'options' that send 2 variants  of options\r",
									"     pm.test(\"options when sending 2 variant of options\", function() {\r",
									"        pm.expect(pm.response.code).to.eq(422)\r",
									"        pm.expect(responseBody.errors.base[0]).to.include(\"You need to add option values for\")\r",
									"     });\r",
									"} else if (testCaseNumber == 41){ // Request body sends up 'options' with 2 'variants' respectively,  'option1' and 'option2'\r",
									"     pm.test(\"options with 2 variant of options  respectively\", function() {\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.options.length).to.eq(2);\r",
									"     });\r",
									"} else if (testCaseNumber == 42){ //Request body sends up 'options' with 3 'variants' respectively,  'option1' , 'option2', 'option3'\r",
									"     pm.test(\"options with 3 variant of options  respectively\", function() {\r",
									"        pm.expect(pm.response.code).to.eq(200);\r",
									"        pm.expect(responseBody.product.options.length).to.eq(3);\r",
									"     });\r",
									"} else if (testCaseNumber == 43){ //Request body includes  'options' that send 4 variants  of options\r",
									"     pm.test(\"options with 4 variant of options  respectively\", function() {\r",
									"        pm.expect(pm.response.code).to.eq(422);\r",
									"        pm.expect(responseBody.errors.base[0]).to.eq(\"Cannot have more than 3 options\")\r",
									"     });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"var option1Name = pm.variables.get(\"option1Name\");\r",
									"var option2Name = pm.variables.get(\"option2Name\");\r",
									"var option3Name = pm.variables.get(\"option3Name\");\r",
									"var option4Name = pm.variables.get(\"option4Name\");\r",
									"\r",
									"var options = [option1Name, option2Name, option3Name, option4Name]\r",
									".filter(optionName => optionName !== \"\")\r",
									".map(optionName => ({name: optionName}))\r",
									"\r",
									"pm.variables.set(\"options\", options);\r",
									"pm.variables.set(\"optionsStringify\", JSON.stringify(options));\r",
									"\r",
									"var testCaseNumber = pm.variables.get(\"TC\")\r",
									"var optionsArray = pm.variables.get(\"optionsArray\");\r",
									"\r",
									"\r",
									"if (optionsArray === \"\" && testCaseNumber == 36) {\r",
									"    pm.variables.set(\"optionsStringify\",JSON.stringify(optionsArray));\r",
									"} else if (optionsArray === \"null\"){\r",
									"    pm.variables.set(\"optionsStringify\",\"null\");\r",
									"} else if (optionsArray === \"[{}]\" && testCaseNumber == 38)\r",
									"     pm.variables.set(\"optionsStringify\",\"[{}]\");\r",
									"\r",
									"    "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product\": {\r\n        \"title\": \"{{productTitle}}\",\r\n        \"body_html\": \"{{bodyHtml}}\",\r\n        \"vendor\": \"{{vendor}}\",\r\n        \"product_type\": \"{{product_type}}\",\r\n        \"status\": \"{{status}}\",\r\n        \"handle\": \"{{handle}}\",\r\n        \"published_scope\": \"{{published_scope}}\",\r\n        \"published_at\": \"{{published_at}}\",\r\n        \"template_suffix\": \"{{template_suffix}}\",\r\n        \"variants\":  [\r\n            {\r\n                \"option1\": \"{{option1Value}}\",\r\n                \"option2\": \"{{option2Value}}\",\r\n                \"option3\": \"{{option3Value}}\"\r\n\r\n            }\r\n        ],\r\n        \"options\": {{optionsStringify}}\r\n      \r\n    }\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/api/2024-01/products/{{productID}}.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"api",
								"2024-01",
								"products",
								"{{productID}}.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete a product",
			"item": [
				{
					"name": "Create a new product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var product = pm.response.json().product;",
									"pm.variables.set(\"productId\", product.id)",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product\": {\r\n        \"title\": \"Product title\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/api/2024-01/products.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"api",
								"2024-01",
								"products.json"
							]
						},
						"description": "  \nCreate a new product"
					},
					"response": []
				},
				{
					"name": "Delete a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete product\", function() {\r",
									"    pm.expect(pm.response.code).to.eq(200);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/api/2024-01/products/{{productId}}.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"api",
								"2024-01",
								"products",
								"{{productId}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a deleted product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get a deleted product\", function() {\r",
									"    pm.expect(pm.response.code).to.eq(404);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/api/2024-01/products/{{productId}}.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"api",
								"2024-01",
								"products",
								"{{productId}}.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Flow a product",
			"item": [
				{
					"name": "Count total of products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json()",
									"",
									"var totalCount =  responseBody.count",
									"",
									"pm.variables.set(\"totalCount\", totalCount)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/api/2024-01/products/count.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"api",
								"2024-01",
								"products",
								"count.json"
							]
						},
						"description": "\nThis endpoint makes an HTTP GET request to retrieve the count of products created before a specified timestamp. The `created_at_max` query parameter is used to filter the products based on their creation date. The response returns a JSON object with the count of products that meet the specified criteria.\n\nTo add a function to count the time to the current date, you can use the current timestamp and calculate the time difference between the current date and the `created_at_max` timestamp.\n"
					},
					"response": []
				},
				{
					"name": "Creat a new product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json().product;",
									"pm.variables.set(\"id\", responseBody.id);",
									"",
									"pm.test(\"create a new product\", function(){",
									"    pm.expect(pm.response.code).to.eq(201);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product\": {\r\n        \"title\": \"test product\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/api/2024-01/products.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"api",
								"2024-01",
								"products.json"
							]
						},
						"description": "  \nCreate a new product"
					},
					"response": []
				},
				{
					"name": "Count the total after creating a new product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json()",
									"",
									"var count =  responseBody.count",
									"",
									"var totalCount = pm.variables.get(\"totalCount\")",
									"",
									"pm.test(\"Count the total after creating a new product\", function(){",
									"    pm.expect(count).to.eq(totalCount + 1)",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/api/2024-01/products/count.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"api",
								"2024-01",
								"products",
								"count.json"
							]
						},
						"description": "\nThis endpoint makes an HTTP GET request to retrieve the count of products created before a specified timestamp. The `created_at_max` query parameter is used to filter the products based on their creation date. The response returns a JSON object with the count of products that meet the specified criteria.\n\nTo add a function to count the time to the current date, you can use the current timestamp and calculate the time difference between the current date and the `created_at_max` timestamp.\n"
					},
					"response": []
				},
				{
					"name": "Updates a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Updates a product\", function(){\r",
									"    pm.expect(pm.response.code).to.eq(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product\": {\r\n        \"title\": \"productTitle update\",\r\n        \"body_html\": \"bodyHtml update\",\r\n        \"vendor\": \"vendor update\",\r\n        \"product_type\": \"product_type update\",\r\n        \"status\": \"active\",\r\n        \"handle\": \"handle update\",\r\n        \"published_scope\": \"published_scope\",\r\n        \"template_suffix\": \"template_suffix update\",\r\n        \"variants\":  [\r\n            {\r\n                \"option1\": \"option1Value\",\r\n                \"option2\": \"option2Value\",\r\n                \"option3\": \"option3Value\"\r\n\r\n            }\r\n        ]          \r\n    }\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/api/2024-01/products/{{id}}.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"api",
								"2024-01",
								"products",
								"{{id}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve a single product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Retrieve a single product\", function(){\r",
									"    pm.expect(pm.response.code).to.eq(200)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/api/2024-01/products/{{id}}.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"api",
								"2024-01",
								"products",
								"{{id}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve a list of products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Retrieve a list product\", function(){\r",
									"    pm.expect(pm.response.code).to.eq(200);\r",
									"    pm.expect(pm.response.json().products.length).to.eq(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/api/2024-01/products.json?ids={{id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"api",
								"2024-01",
								"products.json"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete product\", function() {\r",
									"    pm.expect(pm.response.code).to.eq(200);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/api/2024-01/products/{{id}}.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"api",
								"2024-01",
								"products",
								"{{id}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve a deleted product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get a deleted product\", function() {\r",
									"    pm.expect(pm.response.code).to.eq(404);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/api/2024-01/products/{{id}}.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"api",
								"2024-01",
								"products",
								"{{id}}.json"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{ids}}",
									"disabled": true
								},
								{
									"key": "created_at_max",
									"value": "2025-04-09T03:58:57-04:00",
									"disabled": true
								},
								{
									"key": "created_at_min",
									"value": "null",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "&^&^*(",
									"disabled": true
								},
								{
									"key": "handle",
									"value": "thu-1",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "adfgh&8675JJGG",
									"disabled": true
								},
								{
									"key": "presentment_currencies",
									"value": "10000",
									"disabled": true
								},
								{
									"key": "product_type",
									"value": "djdh^&7dh^&^76767*&&*&*&(%$#@",
									"disabled": true
								},
								{
									"key": "published_at_max",
									"value": "null",
									"disabled": true
								},
								{
									"key": "published_status",
									"value": "!@#^&*()%",
									"disabled": true
								},
								{
									"key": "since_id",
									"value": "11133988579804",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"disabled": true
								},
								{
									"key": "title",
									"value": "thuanh!@#$%^&*()",
									"disabled": true
								},
								{
									"key": "vendor",
									"value": "abc123!@%23^%26*()*(%",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Count the total after deleting a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json()",
									"",
									"var count =  responseBody.count",
									"",
									"var totalCount = pm.variables.get(\"totalCount\");",
									"",
									"pm.test(\"Count the total after deleting a product\", function(){",
									"    pm.expect(count).to.eq(totalCount)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/api/2024-01/products/count.json",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"api",
								"2024-01",
								"products",
								"count.json"
							]
						},
						"description": "\nThis endpoint makes an HTTP GET request to retrieve the count of products created before a specified timestamp. The `created_at_max` query parameter is used to filter the products based on their creation date. The response returns a JSON object with the count of products that meet the specified criteria.\n\nTo add a function to count the time to the current date, you can use the current timestamp and calculate the time difference between the current date and the `created_at_max` timestamp.\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Draft",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var testCaseNumber = pm.variables.get(\"TC\")",
							"var responseBody = pm.response.json()",
							"var count = responseBody.count",
							"var baseCount = pm.variables.get(\"baseCount\")",
							"",
							"   pm.test(\"created_at_min is in the current day \", function(){",
							"        pm.expect(pm.response.code).to.eq(200)",
							"        pm.expect(count).to.eq(baseCount)    ",
							"    });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var option1Name = pm.variables.get(\"option1Name\");\r",
							"var option2Name = pm.variables.get(\"option2Name\");\r",
							"var option3Name = pm.variables.get(\"option3Name\");\r",
							"var option4Name = pm.variables.get(\"option4Name\");\r",
							"\r",
							"var  options = [ option1Name, option2Name, option3Name, option4Name]\r",
							"options.filter(optionName => optionName !== \"\"); // []\r",
							"options.map(optionName => ({name: optionName})); // [{name: mau sac}]\r",
							"\r",
							"var options = (\"options\", options);\r",
							"var optionsStringify = (optionsStringify, JSON.stringify(options));\r",
							"// options: [{\"name\": \"Mau sac\"}, {\"name\": \"Kich thuoc\"}, {\"name\": \"Chat lieu\"}]"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/admin/api/2024-01/products.json",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"api",
						"2024-01",
						"products.json"
					],
					"query": [
						{
							"key": "created_at_min",
							"value": "2024-05-07T11:40:10-04:00",
							"disabled": true
						},
						{
							"key": "created_at_min",
							"value": "2024-05-10T04:25:55-04:01",
							"disabled": true
						},
						{
							"key": "created_at_min",
							"value": "2014-01-14T03:58:57-04:00",
							"disabled": true
						},
						{
							"key": "created_at_max",
							"value": "2014-01-14T03:58:57-04:00",
							"disabled": true
						},
						{
							"key": "published_status",
							"value": "ABCDEghijkmlno!@#^&*()\n",
							"disabled": true
						},
						{
							"key": "*()\n",
							"value": null,
							"disabled": true
						},
						{
							"key": "created_at_min",
							"value": "{{$isoTimestamp}}",
							"disabled": true
						}
					]
				},
				"description": "  \nCreate a new product"
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-Shopify-Access-Token",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "productId",
			"value": ""
		},
		{
			"key": "baseUrl",
			"value": "https://embemeo.myshopify.com"
		},
		{
			"key": "productID",
			"value": ""
		},
		{
			"key": "product_id",
			"value": ""
		},
		{
			"key": "baseCount",
			"value": ""
		},
		{
			"key": "baseTime",
			"value": ""
		},
		{
			"key": "id",
			"value": ""
		},
		{
			"key": "totalCount",
			"value": ""
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		}
	]
}